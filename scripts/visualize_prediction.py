import matplotlib.pyplot as plt
from PIL import Image
import os
import numpy as np # Import numpy for array operations

# --- Configuration ---
# Path to the original input image that was used for inference
# Path to the original input image that was used for inference.
ORIGINAL_IMAGE_PATH = './data/raw/train/DIC-C2DH-HeLa/01/t000.tif' 

# Path to the corresponding ground truth (true) mask for the original image.
# THIS IS THE CRUCIAL CHANGE: Point to the ST/SEG mask.
GROUND_TRUTH_MASK_PATH = './data/raw/train/DIC-C2DH-HeLa/01_ST/SEG/man_seg000.tif'

# Path to the predicted mask generated by inference.py
PREDICTED_MASK_PATH = './predictions/predicted_mask.png'

# Directory to save the combined visualization
VISUALIZATION_OUTPUT_DIR = './visualizations'
VISUALIZATION_FILENAME = 'comparison_t000_binarized_gt.png' # Changed filename for clarity

# --- Create Output Directory ---
os.makedirs(VISUALIZATION_OUTPUT_DIR, exist_ok=True)

# --- Load Images ---
try:
    original_image = Image.open(ORIGINAL_IMAGE_PATH).convert('L') # Convert to grayscale
    print(f"Loaded original image: {ORIGINAL_IMAGE_PATH}")
except FileNotFoundError:
    print(f"Error: Original image not found at {ORIGINAL_IMAGE_PATH}. Please check the path.")
    exit()

ground_truth_mask = None # Initialize to None
try:
    # Load the ground truth mask. It might contain multiple integer labels.
    gt_raw = Image.open(GROUND_TRUTH_MASK_PATH)
    print(f"Loaded raw ground truth mask: {GROUND_TRUTH_MASK_PATH}")
    
    # Convert ground truth to a binary mask: any non-zero pixel becomes 1 (or 255 for display)
    # This is crucial for comparing with your binary U-Net output
    ground_truth_array = np.array(gt_raw)
    ground_truth_binary_array = (ground_truth_array > 0).astype(np.uint8) * 255 # Convert to 0/255 for display
    ground_truth_mask = Image.fromarray(ground_truth_binary_array, 'L')

except FileNotFoundError:
    print(f"Error: Ground truth mask not found at {GROUND_TRUTH_MASK_PATH}. Please check the path.")
    print("Continuing without ground truth visualization for this panel.")
except Exception as e:
    print(f"Error processing ground truth mask: {e}")
    print("Continuing without ground truth visualization for this panel.")


try:
    predicted_mask = Image.open(PREDICTED_MASK_PATH).convert('L') # Convert to grayscale
    print(f"Loaded predicted mask: {PREDICTED_MASK_PATH}")
except FileNotFoundError:
    print(f"Error: Predicted mask not found at {PREDICTED_MASK_PATH}. Please run inference.py first.")
    exit()

# --- Visualize ---
fig, axes = plt.subplots(1, 3, figsize=(18, 6)) # Adjusted figure size for better viewing

# Original Image
axes[0].imshow(original_image, cmap='gray')
axes[0].set_title('Original Image')
axes[0].axis('off') # Hide axes ticks

# Ground Truth Mask
if ground_truth_mask:
    axes[1].imshow(ground_truth_mask, cmap='gray')
    axes[1].set_title('Binarized Ground Truth Mask') # Updated title
else:
    axes[1].text(0.5, 0.5, 'Ground Truth Not Found', 
                 horizontalalignment='center', verticalalignment='center', 
                 transform=axes[1].transAxes, fontsize=12, color='red')
    axes[1].set_title('Ground Truth Mask (Missing)')

axes[1].axis('off')

# Predicted Mask
axes[2].imshow(predicted_mask, cmap='gray')
axes[2].set_title('Predicted Mask')
axes[2].axis('off')

plt.tight_layout() # Adjust subplot params for a tight layout

# Save the visualization
output_viz_path = os.path.join(VISUALIZATION_OUTPUT_DIR, VISUALIZATION_FILENAME)
plt.savefig(output_viz_path, bbox_inches='tight')
print(f"Visualization saved to {output_viz_path}")

plt.show() # Display the plot